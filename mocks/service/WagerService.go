// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "wager-be/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// WagerService is an autogenerated mock type for the WagerService type
type WagerService struct {
	mock.Mock
}

// Buy provides a mock function with given fields: ctx, p
func (_m *WagerService) Buy(ctx context.Context, p *domain.Purchase) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Purchase) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWager provides a mock function with given fields: ctx, wager
func (_m *WagerService) CreateWager(ctx context.Context, wager *domain.Wager) error {
	ret := _m.Called(ctx, wager)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Wager) error); ok {
		r0 = rf(ctx, wager)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListWager provides a mock function with given fields: ctx, pagination
func (_m *WagerService) ListWager(ctx context.Context, pagination *domain.Pagination) ([]domain.Wager, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []domain.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) []domain.Wager); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
