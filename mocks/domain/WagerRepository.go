// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "wager-be/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// WagerRepository is an autogenerated mock type for the WagerRepository type
type WagerRepository struct {
	mock.Mock
}

// Commit provides a mock function with given fields: ctx
func (_m *WagerRepository) Commit(ctx context.Context) {
	_m.Called(ctx)
}

// Get provides a mock function with given fields: ctx, pagination
func (_m *WagerRepository) Get(ctx context.Context, pagination *domain.Pagination) ([]domain.Wager, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []domain.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) []domain.Wager); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWagerByID provides a mock function with given fields: ctx, wagerID
func (_m *WagerRepository) GetWagerByID(ctx context.Context, wagerID int) (*domain.Wager, error) {
	ret := _m.Called(ctx, wagerID)

	var r0 *domain.Wager
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Wager); ok {
		r0 = rf(ctx, wagerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, wagerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, wager
func (_m *WagerRepository) Insert(ctx context.Context, wager *domain.Wager) error {
	ret := _m.Called(ctx, wager)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Wager) error); ok {
		r0 = rf(ctx, wager)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTx provides a mock function with given fields: ctx
func (_m *WagerRepository) NewTx(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Rollback provides a mock function with given fields: ctx
func (_m *WagerRepository) Rollback(ctx context.Context) {
	_m.Called(ctx)
}

// Update provides a mock function with given fields: ctx, wager
func (_m *WagerRepository) Update(ctx context.Context, wager *domain.Wager) error {
	ret := _m.Called(ctx, wager)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Wager) error); ok {
		r0 = rf(ctx, wager)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
